DESCRIPTION
-----------
This archive contains a simple and readable ANSI C implementation of
frequency substitution coding and decoding.  Frequency substitution is a
form of encoding that assigns the smallest values to the most frequent
symbols.

This implementation is not intended to be the best, fastest, smallest, or any
other performance related adjective.

More information on frequency substitution encoding may be found at:
https://michaeldipperstein.github.io/freq.html

FILES
-----
COPYING         - Rules for copying and distributing GPL software
COPYING.LESSER  - Rules for copying and distributing LGPL software
freqsub.c       - Source for frequency substitution library encoding and
                  decoding routines.
freqsub.h       - Header containing prototypes for frequency substitution
                  library functions.
Makefile        - makefile for this project (assumes gcc compiler and GNU make)
README          - this file
sample.c        - Demonstration of how to use the rice library functions
optlist/        - Subtree containing optlist command line option parser library

BUILDING
--------
To build these files with GNU make and gcc, simply enter "make" from the
command line.  The executable will be named sample (or sample.exe).

USAGE
-----
Usage: sample <options>

options:
  -d : Decode input file to output file.
  -e : Encode input file to output file.
  -i <filename> : Name of input file.
  -o <filename> : Name of output file.
  -h|?  : Print out command line options.

-d      Decode the specified input file (see -i) using the frequency
        substitution decoding algorithm.  Results are written to the specified
        output file (see -o).  Only files encode by this program may be
        decoded.

-e      Encode the specified input file (see -i) using the frequency
        substitution encoding algorithm.  Results are written to the specified
        output file (see -o).

-i <filename>   The name of the input file.  There is no valid usage of this
                program without a specified input file.

-o <filename>   The name of the output file.  If no file is specified, stdout
                will be used.  NOTE: Sending compressed output to stdout may
                produce undesirable results.

LIBRARY API
-----------
Encoding Data:
int FreqEncodeFile(FILE *inFile, FILE *outFile);
inFile
    The file stream to be encoded.  It must be rewindable and opened.
    NULL pointers will return an error.
outFile
    The file stream receiving the encoded results.  It must be opened.  NULL
    pointers will return an error.
Return Value
    Zero for success, -1 for failure.  Error type is contained in errno.  Files
    will remain open.

Decoding Data:
int FreqDecodeFile(FILE *inFile, FILE *outFile);
inFile
    The file stream to be decoded.  It must be opened.  NULL pointers will
    return an error.
outFile
    The file stream receiving the decoded results.  It must be opened.  NULL
    pointers will return an error.
Return Value
    Zero for success, -1 for failure.  Error type is contained in errno.  Files
    will remain open.

HISTORY
-------
12/22/08  - Initial Release
11/03/14  - Changed the API so that encode and decode routines accept opened
            file streams instead of file names.
          - New sparse header that's never bigger than full header, so only
            one kind of header is provided.
          - Changed return value to 0 for success and -1 for failure with
            reason in errno.
          - Upgrade to latest oplist library.
          - Tighter adherence to Michael Barr's "Top 10 Bug-Killing Coding
            Standard Rules" (http://www.barrgroup.com/webinars/10rules).
07/16/17  - Changes for cleaner use with GitHub

TODO
----
- Try dynamic code generation.

AUTHOR
------
Michael Dipperstein (mdipperstein@gmail.com)
https://michaeldipperstein.github.io
